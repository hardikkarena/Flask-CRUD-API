{
	"info": {
		"_postman_id": "dccb0d17-13ec-4a57-b216-112202ef92a9",
		"name": "BLOG CRUD",
		"description": "StartFragment\n\n**Register** - user will pass first_name,last_name,email,password in json fromat - in server site we'll check if email which is entered by user is already exist or not. - if user is already exist then it'll return error with status code 501 - else we create new user in databse and return that data in json fromat with status code 201\n\nStartFragment\n\n**Login** api : - user will email & password in json fromat - in server site we'll check if email which is entered by user is already exist or not. - if user exist then we'll match passwords from database & from user - if passwords match we'll create session of user id & return user in json format with status code 202 - id password dose not matched then we'll return error with status code 401\n\nEndFragment\n\nStartFragment\n\nL**ogout** api : - when we call logout api - it'll delete session and return messege with status code 200\n\n**StartFragment**\n\n**Create Post** - user will title & description in json fromat - in server site we'll first we check user login or not - if user is not login we'll return error with status code 501 - else we create user from sesion id and create new post in databse - and return it in json format with status code 201\n\nEndFragment\n\nStartFragment\n\n**Post api** - it'll call with get method and in get method we'll pass id of post - usig that is from get methof it'll check post exist or not - if post not exist we'll error with status code 404 - if post exist than fatch post from databse and return with status code 200\n\nStartFragment\n\n**Posts api**    - it'll call with get method     - then fatch all posts from databse and return it with status code 200\n\nEndFragmentStartFragment\n\n**Update_post api**    - it'll call with PUT method with  data id title & description    - using id we'll fatch that post and update it and      return it with status code 202\n\nEndFragmentStartFragment\n\n D**elete_post api**    - it'll call with DELETE method with  data id     - using id we'll fatch that post and delete it and      return massge with status code 200\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\":\"Sagar\",\r\n    \"last_name\":\"Gohil\",\r\n    \"email\":\"sagar@gmail.com\",\r\n    \"password\":\"456\"\r\n\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\":\"Sagar\",\r\n    \"last_name\":\"Gohil\",\r\n    \"email\":\"sagar@gmail.com\",\r\n    \"password\":\"456\"\r\n\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"sagar@gmail.com\",\r\n    \"password\":\"456\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Invalid email",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"bharat@gmail.com\",\r\n    \"password\":\"456\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Invalid password",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"sagar@gmail.com\",\r\n    \"password\":\"4587436\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://127.0.0.1:5000/logout",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post User Not Login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"Python\",\r\n    \"description\" : \"Python is a high-level, interpreted, general-purpose programming language\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"C\",\r\n    \"description\" : \"C is a general-purpose computer programming language\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get One Post",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Posts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"swift \",\r\n    \"description\" : \"Swift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post/update/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"update",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Id not Found",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"swift \",\r\n    \"description\" : \"Swift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post/update/7",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"update",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:5000/post/delete/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"delete",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Id not Found",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/delete/8",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"delete",
						"8"
					]
				}
			},
			"response": []
		}
	]
}